
type Input {
  prompt: String
}

type Urls {
  get: String
  cancel: String
}

type Metrics {
  predict_time: Float
}

type Prediction {
  id: ID!
  version: String!
  created_at: String
  started_at: String
  completed_at: String
  hardware: String
  webhook_completed: String
  source: String
  status: String!
  input: Input
  output: [String]
  urls: Urls
  error: String
  logs: String
  metrics: Metrics
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input InputInput {
  prompt: String
}

input UrlsInput {
  get: String
  cancel: String
}

input MetricsInput {
  predict_time: Float
}

type ModelPredictionConnection {
  items: [Prediction]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPredictionFilterInput {
  id: ModelIDInput
  version: ModelStringInput
  created_at: ModelStringInput
  started_at: ModelStringInput
  completed_at: ModelStringInput
  hardware: ModelStringInput
  webhook_completed: ModelStringInput
  source: ModelStringInput
  status: ModelStringInput
  output: ModelStringInput
  error: ModelStringInput
  logs: ModelStringInput
  and: [ModelPredictionFilterInput]
  or: [ModelPredictionFilterInput]
  not: ModelPredictionFilterInput
}

type Query {
  getPrediction(id: ID!): Prediction
  listPredictions(filter: ModelPredictionFilterInput, limit: Int, nextToken: String): ModelPredictionConnection
  syncPredictions(filter: ModelPredictionFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPredictionConnection
}

input ModelPredictionConditionInput {
  version: ModelStringInput
  created_at: ModelStringInput
  started_at: ModelStringInput
  completed_at: ModelStringInput
  hardware: ModelStringInput
  webhook_completed: ModelStringInput
  source: ModelStringInput
  status: ModelStringInput
  output: ModelStringInput
  error: ModelStringInput
  logs: ModelStringInput
  and: [ModelPredictionConditionInput]
  or: [ModelPredictionConditionInput]
  not: ModelPredictionConditionInput
}

input CreatePredictionInput {
  id: ID
  version: String!
  created_at: String
  started_at: String
  completed_at: String
  hardware: String
  webhook_completed: String
  source: String
  status: String!
  input: InputInput
  output: [String]
  urls: UrlsInput
  error: String
  logs: String
  metrics: MetricsInput
  _version: Int
}

input UpdatePredictionInput {
  id: ID!
  version: String
  created_at: String
  started_at: String
  completed_at: String
  hardware: String
  webhook_completed: String
  source: String
  status: String
  input: InputInput
  output: [String]
  urls: UrlsInput
  error: String
  logs: String
  metrics: MetricsInput
  _version: Int
}

input DeletePredictionInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPrediction(input: CreatePredictionInput!, condition: ModelPredictionConditionInput): Prediction
  updatePrediction(input: UpdatePredictionInput!, condition: ModelPredictionConditionInput): Prediction
  deletePrediction(input: DeletePredictionInput!, condition: ModelPredictionConditionInput): Prediction
}

input ModelSubscriptionPredictionFilterInput {
  id: ModelSubscriptionIDInput
  version: ModelSubscriptionStringInput
  created_at: ModelSubscriptionStringInput
  started_at: ModelSubscriptionStringInput
  completed_at: ModelSubscriptionStringInput
  hardware: ModelSubscriptionStringInput
  webhook_completed: ModelSubscriptionStringInput
  source: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  output: ModelSubscriptionStringInput
  error: ModelSubscriptionStringInput
  logs: ModelSubscriptionStringInput
  and: [ModelSubscriptionPredictionFilterInput]
  or: [ModelSubscriptionPredictionFilterInput]
}

type Subscription {
  onCreatePrediction(filter: ModelSubscriptionPredictionFilterInput): Prediction @aws_subscribe(mutations: ["createPrediction"])
  onUpdatePrediction(filter: ModelSubscriptionPredictionFilterInput): Prediction @aws_subscribe(mutations: ["updatePrediction"])
  onDeletePrediction(filter: ModelSubscriptionPredictionFilterInput): Prediction @aws_subscribe(mutations: ["deletePrediction"])
}

